<?xml version="1.0"?>
<!--

 Licensed to the Apache Software Foundation (ASF) under one
 or more contributor license agreements.  See the NOTICE file
 distributed with this work for additional information
 regarding copyright ownership.  The ASF licenses this file
 to you under the Apache License, Version 2.0 (the
 "License"); you may not use this file except in compliance
 with the License.  You may obtain a copy of the License at

   http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing,
 software distributed under the License is distributed on an
 "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 KIND, either express or implied.  See the License for the
 specific language governing permissions and limitations
 under the License.

-->

<section xmlns="http://docbook.org/ns/docbook" version="5.0" xml:id="Java-Broker-Security-Composite-Provider">
    <title>Composite Provider</title>

    <para>Composite Provider uses existing username / password authentication providers allowing to perform authentication
        against them in order defined. It can contains following authentication providers:
        <itemizedlist>
            <listitem><para><emphasis><link linkend="Java-Broker-Security-MD5-Provider">MD5 Provider</link></emphasis></para></listitem>
            <listitem><para><emphasis><link linkend="Java-Broker-Security-Plain-Provider">Plain Provider</link></emphasis></para></listitem>
            <listitem><para><emphasis><link linkend="Java-Broker-Security-ScramSha-Providers">SCRAM SHA Providers</link></emphasis></para></listitem>
            <listitem><para><emphasis><link linkend="Java-Broker-Security-LDAP-Provider">Simple LDAP Providers</link></emphasis></para></listitem>
        </itemizedlist>
    </para>

    <para>When performing authentication, composite provider checks presence of a user with a given username in the first
    delegate provider and if found, performs authentication. It should be considered, that in case of name collision
    (when delegate providers contains users with same username but different passwords), it's not guaranteed that
    authentication will succeed even with the correct credentials. Therefore username collision should be avoided, i.e.
    each delegate provider should contain users with unique usernames.</para>

    <table pgwide="1">
        <title>SASL Mechanisms</title>
        <tgroup cols="2">
            <colspec colnum="1" colname="authentication_provider" colwidth="1*"/>
            <colspec colnum="2" colname="sasl_mechanisms" colwidth="1*"/>
            <thead>
                <row>
                    <entry>Authentication provider</entry>
                    <entry>SASL mechanisms</entry>
                </row>
            </thead>
            <tbody>
                <row xml:id="Java-Broker-Security-Composite-Provider-Delegate-SASL-Mechanisms-MD5">
                    <entry><link linkend="Java-Broker-Security-MD5-Provider">MD5 Provider</link></entry>
                    <entry>PLAIN, CRAM-MD5-HASHED, CRAM-MD5-HEX</entry>
                </row>
                <row xml:id="Java-Broker-Security-Composite-Provider-Delegate-SASL-Mechanisms-Plain">
                    <entry><link linkend="Java-Broker-Security-Plain-Provider">Plain</link></entry>
                    <entry>PLAIN, CRAM-MD5, SCRAM-SHA-1, SCRAM-SHA-256</entry>
                </row>
                <row xml:id="Java-Broker-Security-Composite-Provider-Delegate-SASL-Mechanisms-ScramSha">
                    <entry><link linkend="Java-Broker-Security-ScramSha-Providers">SCRAM SHA Providers</link></entry>
                    <entry>PLAIN, SCRAM-SHA-1, SCRAM-SHA-256</entry>
                </row>
                <row xml:id="Java-Broker-Security-Composite-Provider-Delegate-SASL-Mechanisms-Simple-LDAP">
                    <entry><link linkend="Java-Broker-Security-LDAP-Provider">Simple LDAP Providers</link></entry>
                    <entry>PLAIN</entry>
                </row>
            </tbody>
        </tgroup>
    </table>

    <para>Composite provider exposes intersection of SASL mechanism provided by its delegates.</para>

</section>
